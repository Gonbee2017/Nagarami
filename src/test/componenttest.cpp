#include"../nagarami.h"
#include<memory>
#include"nagaramitest.h"
#include<CppUTest/TestHarness.h>
#include<windows.h>

namespace nm
{

TEST_GROUP(component)
{
    TEST_SETUP()
    {
        lg=make_shared<logger>();
        pt=make_shared<port>();
        ct=make_shared<context>();
    }
    TEST_TEARDOWN()
    {
        ct.reset();
        pt.reset();
        lg.reset();
    }
    shared_ptr<logger> lg;
};

TEST(component,PushButton)
{
    lg->mockUpWithBody(NAMED_ADDRESS(pt->SendMessageW),
    [this] (HWND window,UINT message,WPARAM wParam,LPARAM lParam)->LRESULT
    {
        switch(lg->count(NAMED_ADDRESS(pt->SendMessageW)))
        {
        case 1:
            CHECK_EQUAL
            (
                describe(TOOLINFOW(
                {
                    TTTOOLINFOW_V2_SIZE,
                    TTF_SUBCLASS,
                    (HWND)0x90,
                    7,
                    RECT({0,0,0,0}),
                    NULL,
                    (LPWSTR)L"fuga",
                    0,
                    (LPVOID)NULL
                })),
                describe((TOOLINFOW*)lParam)
            );
            break;
        };
        return TRUE;
    });
    lg->mockUpWithBody(NAMED_ADDRESS(pt->LoadBitmap),
    [this] (HINSTANCE instance,LPCTSTR name)->HBITMAP
    {return (HBITMAP)(0x10+lg->count(NAMED_ADDRESS(pt->LoadBitmap)));});
    lg->mockUpWithBody(NAMED_ADDRESS(pt->GetObject),
    [this] (HGDIOBJ object,int sizeOfBuffer,LPVOID buffer)->int
    {
        *(BITMAP*)buffer=BITMAP(
        {
            1,
            2,
            3,
            4,
            5,
            6,
            (LPVOID)(0x20+lg->count(NAMED_ADDRESS(pt->GetObject)))
        });
        return sizeof(BITMAP);
    });
    lg->mockUpWithBody
    (NAMED_ADDRESS(pt->CreateCompatibleDC),[this] (HDC dc)->HDC
    {
        return (HDC)(0x30+lg->count
        (NAMED_ADDRESS(pt->CreateCompatibleDC)));
    });
    lg->mockUpWithResult(NAMED_ADDRESS(pt->SelectObject),(HGDIOBJ)NULL);
    lg->mockUpWithBody
    (NAMED_ADDRESS(pt->CreateCompatibleBitmap),
    [this] (HDC destDC,int width,int height)->HBITMAP
    {
        return (HBITMAP)(0x40+lg->count
        (NAMED_ADDRESS(pt->CreateCompatibleBitmap)));
    });
    lg->mockUpWithResult(NAMED_ADDRESS(pt->FillRect),TRUE);
    lg->mockUpWithResult(NAMED_ADDRESS(pt->Ellipse),TRUE);
    lg->mockUpWithResult(NAMED_ADDRESS(pt->BitBlt),TRUE);
    lg->mockUpWithBody(NAMED_ADDRESS(pt->CreatePen),
    [this] (int style,int width,COLORREF color)->HPEN
    {return (HPEN)(0x50+lg->count(NAMED_ADDRESS(pt->CreatePen)));});
    lg->mockUpWithBody(NAMED_ADDRESS(pt->CreateSolidBrush),
    [this] (COLORREF color)->HBRUSH
    {
        return (HBRUSH)(0x60+lg->count
        (NAMED_ADDRESS(pt->CreateSolidBrush)));
    });
    lg->mockUpWithResult(NAMED_ADDRESS(pt->DeleteDC),TRUE);
    lg->mockUpWithResult(NAMED_ADDRESS(pt->DeleteObject),TRUE);

    ct->instance=(HINSTANCE)0x70;
    ct->black_brush=nm::CreateSolidBrush(RGB(1,2,3));
    ct->black_pen=nm::CreatePen(1,2,RGB(1,2,3));
    ct->component_brush1=nm::CreateSolidBrush(RGB(1,2,3));
    ct->component_brush2=nm::CreateSolidBrush(RGB(1,2,3));
    ct->component_pen1=nm::CreatePen(1,2,RGB(1,2,3));
    ct->component_pen2=nm::CreatePen(1,2,RGB(1,2,3));
    ct->white_brush=nm::CreateSolidBrush(RGB(1,2,3));
    lg->history().clear();

    auto pushButton=make_shared<PushButton>
    (
        "hoge",
        (HDC)0x80,
        POINT({1,-2}),
        (HWND)0x90,
        (HWND)0xa0,
        7,
        L"fuga"
    );
    CHECK_FALSE(pushButton->active());
    CHECK_EQUAL(28,lg->history().size());
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->SendMessageW),
            (HWND)0xa0,
            TTM_ADDTOOLW,
            0,
            OMIT_ARGUMENT
        ),
        lg->history().at(0)
    );
    CHECK_EQUAL
    (
        call
        (NAMED_ADDRESS(pt->SendMessageW),(HWND)0xa0,TTM_ACTIVATE,FALSE,0),
        lg->history().at(1)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->CreateCompatibleBitmap),(HDC)0x80,16,16),
        lg->history().at(2)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->CreateCompatibleDC),(HDC)0x80),
        lg->history().at(3)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x31,(HGDIOBJ)0x41),
        lg->history().at(4)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->CreateCompatibleBitmap),(HDC)0x80,16,16),
        lg->history().at(5)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->CreateCompatibleDC),(HDC)0x80),
        lg->history().at(6)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x32,(HGDIOBJ)0x42),
        lg->history().at(7)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->LoadBitmap),(HINSTANCE)0x70,"hoge"),
        lg->history().at(8)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->GetObject),
            (HGDIOBJ)0x11,
            sizeof(BITMAP),
            OMIT_ARGUMENT
        ),
        lg->history().at(9)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->CreateCompatibleDC),(HDC)0x80),
        lg->history().at(10)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x33,(HGDIOBJ)0x11),
        lg->history().at(11)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->CreateCompatibleBitmap),(HDC)0x80,16,16),
        lg->history().at(12)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->CreateCompatibleDC),(HDC)0x80),
        lg->history().at(13)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x34,(HGDIOBJ)0x43),
        lg->history().at(14)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->FillRect),
            (HDC)0x34,
            RECT({0,0,16,16}),
            (HBRUSH)0x64
        ),
        lg->history().at(15)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x34,(HGDIOBJ)0x51),
        lg->history().at(16)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x34,(HGDIOBJ)0x61),
        lg->history().at(17)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->Ellipse),(HDC)0x34,0,0,16,16),
        lg->history().at(18)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->FillRect),
            (HDC)0x32,
            RECT({0,0,16,16}),
            (HBRUSH)0x62
        ),
        lg->history().at(19)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x33,
            0,
            0,
            NOTSRCCOPY
        ),
        lg->history().at(20)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x32,
            0,
            0,
            16,
            16,
            (HDC)0x31,
            0,
            0,
            SRCAND
        ),
        lg->history().at(21)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->FillRect),
            (HDC)0x31,
            RECT({0,0,16,16}),
            (HBRUSH)0x61
        ),
        lg->history().at(22)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x31,(HGDIOBJ)0x52),
        lg->history().at(23)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x31,(HGDIOBJ)0x63),
        lg->history().at(24)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->Ellipse),(HDC)0x31,0,0,16,16),
        lg->history().at(25)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x33,
            0,
            0,
            SRCAND
        ),
        lg->history().at(26)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x32,
            0,
            0,
            SRCPAINT
        ),
        lg->history().at(27)
    );
    lg->history().clear();

    lg->mockUpWithResult(NAMED_ADDRESS(pt->SendMessageW),(LRESULT)TRUE);
    pushButton->relocate(SIZE({100,200}));
    CHECK_FALSE(pushButton->hitTest(POINT({39,152})));
    CHECK(pushButton->hitTest(POINT({40,152})));
    CHECK_FALSE(pushButton->hitTest(POINT({32,159})));
    CHECK(pushButton->hitTest(POINT({32,160})));
    CHECK_FALSE(pushButton->hitTest(POINT({44,167})));
    CHECK(pushButton->hitTest(POINT({43,167})));
    CHECK_FALSE(pushButton->hitTest(POINT({47,164})));
    CHECK(pushButton->hitTest(POINT({47,163})));
    CHECK_FALSE(pushButton->hitTestTool(POINT({39,152})));
    CHECK(pushButton->hitTestTool(POINT({40,152})));
    CHECK_FALSE(pushButton->hitTestTool(POINT({32,159})));
    CHECK(pushButton->hitTestTool(POINT({32,160})));
    CHECK_FALSE(pushButton->hitTestTool(POINT({44,167})));
    CHECK(pushButton->hitTestTool(POINT({43,167})));
    CHECK_FALSE(pushButton->hitTestTool(POINT({47,164})));
    CHECK(pushButton->hitTestTool(POINT({47,163})));
    CHECK_EQUAL(1,lg->history().size());
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->SendMessageW),
            (HWND)0xa0,
            TTM_NEWTOOLRECTW,
            0,
            OMIT_ARGUMENT
        ),
        lg->history().at(0)
    );
    lg->history().clear();

    pushButton->activate(POINT({1,-2}));
    CHECK(pushButton->active());
    CHECK_EQUAL(9,lg->history().size());
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->FillRect),
            (HDC)0x32,
            RECT({0,0,16,16}),
            (HBRUSH)0x63
        ),
        lg->history().at(0)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x33,
            0,
            0,
            NOTSRCCOPY
        ),
        lg->history().at(1)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x32,
            0,
            0,
            16,
            16,
            (HDC)0x31,
            0,
            0,
            SRCAND
        ),
        lg->history().at(2)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->FillRect),
            (HDC)0x31,
            RECT({0,0,16,16}),
            (HBRUSH)0x61
        ),
        lg->history().at(3)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x31,(HGDIOBJ)0x53),
        lg->history().at(4)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x31,(HGDIOBJ)0x62),
        lg->history().at(5)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->Ellipse),(HDC)0x31,0,0,16,16),
        lg->history().at(6)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x33,
            0,
            0,
            SRCAND
        ),
        lg->history().at(7)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x32,
            0,
            0,
            SRCPAINT
        ),
        lg->history().at(8)
    );
    lg->history().clear();

    pushButton->paint((HDC)0xb0);
    CHECK_EQUAL(2,lg->history().size());
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0xb0,
            32,
            152,
            16,
            16,
            (HDC)0x34,
            0,
            0,
            SRCAND
        ),
        lg->history().at(0)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0xb0,
            32,
            152,
            16,
            16,
            (HDC)0x31,
            0,
            0,
            SRCPAINT
        ),
        lg->history().at(1)
    );
    lg->history().clear();

    pushButton->deactivate(POINT({32,152}));
    CHECK_EQUAL(9,lg->history().size());
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->FillRect),
            (HDC)0x32,
            RECT({0,0,16,16}),
            (HBRUSH)0x62
        ),
        lg->history().at(0)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x33,
            0,
            0,
            NOTSRCCOPY
        ),
        lg->history().at(1)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x32,
            0,
            0,
            16,
            16,
            (HDC)0x31,
            0,
            0,
            SRCAND
        ),
        lg->history().at(2)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->FillRect),
            (HDC)0x31,
            RECT({0,0,16,16}),
            (HBRUSH)0x61
        ),
        lg->history().at(3)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x31,(HGDIOBJ)0x52),
        lg->history().at(4)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x31,(HGDIOBJ)0x63),
        lg->history().at(5)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->Ellipse),(HDC)0x31,0,0,16,16),
        lg->history().at(6)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x33,
            0,
            0,
            SRCAND
        ),
        lg->history().at(7)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x32,
            0,
            0,
            SRCPAINT
        ),
        lg->history().at(8)
    );
    lg->history().clear();

    lg->mockUp(NAMED_ADDRESS(pushButton->click));
    pushButton->deactivate(POINT({40,160}));
    CHECK_EQUAL(10,lg->history().size());
    CHECK_EQUAL
    (call(NAMED_ADDRESS(pushButton->click)),lg->history().at(0));
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->FillRect),
            (HDC)0x32,
            RECT({0,0,16,16}),
            (HBRUSH)0x62
        ),
        lg->history().at(1)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x33,
            0,
            0,
            NOTSRCCOPY
        ),
        lg->history().at(2)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x32,
            0,
            0,
            16,
            16,
            (HDC)0x31,
            0,
            0,
            SRCAND
        ),
        lg->history().at(3)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->FillRect),
            (HDC)0x31,
            RECT({0,0,16,16}),
            (HBRUSH)0x61
        ),
        lg->history().at(4)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x31,(HGDIOBJ)0x52),
        lg->history().at(5)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x31,(HGDIOBJ)0x63),
        lg->history().at(6)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->Ellipse),(HDC)0x31,0,0,16,16),
        lg->history().at(7)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x33,
            0,
            0,
            SRCAND
        ),
        lg->history().at(8)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x32,
            0,
            0,
            SRCPAINT
        ),
        lg->history().at(9)
    );
    lg->history().clear();

    pushButton->activateTool();
    CHECK_EQUAL(1,lg->history().size());
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->SendMessageW),
            (HWND)0xa0,
            TTM_ACTIVATE,
            TRUE,
            0
        ),
        lg->history().at(0)
    );
    lg->history().clear();

    pushButton->activateTool();
    CHECK_EQUAL(0,lg->history().size());
    lg->history().clear();

    pushButton->deactivateTool();
    CHECK_EQUAL(1,lg->history().size());
    CHECK_EQUAL
    (
        call
        (NAMED_ADDRESS(pt->SendMessageW),(HWND)0xa0,TTM_ACTIVATE,FALSE,0),
        lg->history().at(0)
    );
    lg->history().clear();

    pushButton->deactivateTool();
    CHECK_EQUAL(0,lg->history().size());
    lg->history().clear();

    pushButton.reset();
    CHECK_EQUAL(8,lg->history().size());
    CHECK_EQUAL
    (call(NAMED_ADDRESS(pt->DeleteDC),(HDC)0x34),lg->history().at(0));
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->DeleteObject),(HDC)0x43),
        lg->history().at(1)
    );
    CHECK_EQUAL
    (call(NAMED_ADDRESS(pt->DeleteDC),(HDC)0x33),lg->history().at(2));
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->DeleteObject),(HDC)0x11),
        lg->history().at(3)
    );
    CHECK_EQUAL
    (call(NAMED_ADDRESS(pt->DeleteDC),(HDC)0x32),lg->history().at(4));
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->DeleteObject),(HDC)0x42),
        lg->history().at(5)
    );
    CHECK_EQUAL
    (call(NAMED_ADDRESS(pt->DeleteDC),(HDC)0x31),lg->history().at(6));
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->DeleteObject),(HDC)0x41),
        lg->history().at(7)
    );
}

TEST(component,RadioButton)
{
    lg->mockUpWithBody(NAMED_ADDRESS(pt->SendMessageW),
    [this] (HWND window,UINT message,WPARAM wParam,LPARAM lParam)->LRESULT
    {
        switch(lg->count(NAMED_ADDRESS(pt->SendMessageW)))
        {
        case 1:
            CHECK_EQUAL
            (
                describe(TOOLINFOW(
                {
                    TTTOOLINFOW_V2_SIZE,
                    TTF_SUBCLASS,
                    (HWND)0x90,
                    7,
                    RECT({0,0,0,0}),
                    NULL,
                    (LPWSTR)L"fuga",
                    0,
                    (LPVOID)NULL
                })),
                describe((TOOLINFOW*)lParam)
            );
            break;
        }
        return TRUE;
    });
    lg->mockUpWithBody(NAMED_ADDRESS(pt->LoadBitmap),
    [this] (HINSTANCE instance,LPCTSTR name)->HBITMAP
    {return (HBITMAP)(0x10+lg->count(NAMED_ADDRESS(pt->LoadBitmap)));});
    lg->mockUpWithBody(NAMED_ADDRESS(pt->GetObject),
    [this] (HGDIOBJ object,int sizeOfBuffer,LPVOID buffer)->int
    {
        *(BITMAP*)buffer=BITMAP(
        {
            1,
            2,
            3,
            4,
            5,
            6,
            (LPVOID)(0x20+lg->count(NAMED_ADDRESS(pt->GetObject)))
        });
        return sizeof(BITMAP);
    });
    lg->mockUpWithBody
    (NAMED_ADDRESS(pt->CreateCompatibleDC),[this] (HDC dc)->HDC
    {
        return (HDC)(0x30+lg->count
        (NAMED_ADDRESS(pt->CreateCompatibleDC)));
    });
    lg->mockUpWithResult(NAMED_ADDRESS(pt->SelectObject),(HGDIOBJ)NULL);
    lg->mockUpWithBody
    (NAMED_ADDRESS(pt->CreateCompatibleBitmap),
    [this] (HDC destDC,int width,int height)->HBITMAP
    {
        return (HBITMAP)(0x40+lg->count
        (NAMED_ADDRESS(pt->CreateCompatibleBitmap)));
    });
    lg->mockUpWithResult(NAMED_ADDRESS(pt->FillRect),TRUE);
    lg->mockUpWithResult(NAMED_ADDRESS(pt->Ellipse),TRUE);
    lg->mockUpWithResult(NAMED_ADDRESS(pt->BitBlt),TRUE);
    lg->mockUpWithBody(NAMED_ADDRESS(pt->CreatePen),
    [this] (int style,int width,COLORREF color)->HPEN
    {return (HPEN)(0x50+lg->count(NAMED_ADDRESS(pt->CreatePen)));});
    lg->mockUpWithBody(NAMED_ADDRESS(pt->CreateSolidBrush),
    [this] (COLORREF color)->HBRUSH
    {
        return (HBRUSH)(0x60+lg->count
        (NAMED_ADDRESS(pt->CreateSolidBrush)));
    });
    lg->mockUpWithResult(NAMED_ADDRESS(pt->DeleteDC),TRUE);
    lg->mockUpWithResult(NAMED_ADDRESS(pt->DeleteObject),TRUE);

    ct->instance=(HINSTANCE)0x70;
    ct->black_brush=nm::CreateSolidBrush(RGB(1,2,3));
    ct->black_pen=nm::CreatePen(1,2,RGB(1,2,3));
    ct->component_brush1=nm::CreateSolidBrush(RGB(1,2,3));
    ct->component_brush2=nm::CreateSolidBrush(RGB(1,2,3));
    ct->component_pen1=nm::CreatePen(1,2,RGB(1,2,3));
    ct->component_pen2=nm::CreatePen(1,2,RGB(1,2,3));
    ct->white_brush=nm::CreateSolidBrush(RGB(1,2,3));
    lg->history().clear();

    auto radioButton=make_shared<RadioButton>
    (
        false,
        "hoge",
        (HDC)0x80,
        POINT({1,-2}),
        (HWND)0x90,
        (HWND)0xa0,
        7,
        L"fuga"
    );
    CHECK_FALSE(radioButton->active());
    CHECK_FALSE(radioButton->value());
    CHECK_EQUAL(28,lg->history().size());
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->SendMessageW),
            (HWND)0xa0,
            TTM_ADDTOOLW,
            0,
            OMIT_ARGUMENT
        ),
        lg->history().at(0)
    );
    CHECK_EQUAL
    (
        call
        (NAMED_ADDRESS(pt->SendMessageW),(HWND)0xa0,TTM_ACTIVATE,FALSE,0),
        lg->history().at(1)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->CreateCompatibleBitmap),(HDC)0x80,16,16),
        lg->history().at(2)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->CreateCompatibleDC),(HDC)0x80),
        lg->history().at(3)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x31,(HGDIOBJ)0x41),
        lg->history().at(4)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->CreateCompatibleBitmap),(HDC)0x80,16,16),
        lg->history().at(5)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->CreateCompatibleDC),(HDC)0x80),
        lg->history().at(6)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x32,(HGDIOBJ)0x42),
        lg->history().at(7)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->LoadBitmap),(HINSTANCE)0x70,"hoge"),
        lg->history().at(8)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->GetObject),
            (HGDIOBJ)0x11,
            sizeof(BITMAP),
            OMIT_ARGUMENT
        ),
        lg->history().at(9)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->CreateCompatibleDC),(HDC)0x80),
        lg->history().at(10)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x33,(HGDIOBJ)0x11),
        lg->history().at(11)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->CreateCompatibleBitmap),(HDC)0x80,16,16),
        lg->history().at(12)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->CreateCompatibleDC),(HDC)0x80),
        lg->history().at(13)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x34,(HGDIOBJ)0x43),
        lg->history().at(14)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->FillRect),
            (HDC)0x34,
            RECT({0,0,16,16}),
            (HBRUSH)0x64
        ),
        lg->history().at(15)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x34,(HGDIOBJ)0x51),
        lg->history().at(16)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x34,(HGDIOBJ)0x61),
        lg->history().at(17)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->Ellipse),(HDC)0x34,0,0,16,16),
        lg->history().at(18)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->FillRect),
            (HDC)0x32,
            RECT({0,0,16,16}),
            (HBRUSH)0x62
        ),
        lg->history().at(19)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x33,
            0,
            0,
            NOTSRCCOPY
        ),
        lg->history().at(20)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x32,
            0,
            0,
            16,
            16,
            (HDC)0x31,
            0,
            0,
            SRCAND
        ),
        lg->history().at(21)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->FillRect),
            (HDC)0x31,
            RECT({0,0,16,16}),
            (HBRUSH)0x61
        ),
        lg->history().at(22)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x31,(HGDIOBJ)0x52),
        lg->history().at(23)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x31,(HGDIOBJ)0x63),
        lg->history().at(24)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->Ellipse),(HDC)0x31,0,0,16,16),
        lg->history().at(25)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x33,
            0,
            0,
            SRCAND
        ),
        lg->history().at(26)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x32,
            0,
            0,
            SRCPAINT
        ),
        lg->history().at(27)
    );
    lg->history().clear();

    lg->mockUpWithResult(NAMED_ADDRESS(pt->SendMessageW),(LRESULT)TRUE);
    radioButton->relocate(SIZE({100,200}));
    lg->history().clear();

    radioButton->activate(POINT({1,-2}));
    CHECK(radioButton->active());
    CHECK_EQUAL(9,lg->history().size());
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->FillRect),
            (HDC)0x32,
            RECT({0,0,16,16}),
            (HBRUSH)0x63
        ),
        lg->history().at(0)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x33,
            0,
            0,
            NOTSRCCOPY
        ),
        lg->history().at(1)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x32,
            0,
            0,
            16,
            16,
            (HDC)0x31,
            0,
            0,
            SRCAND
        ),
        lg->history().at(2)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->FillRect),
            (HDC)0x31,
            RECT({0,0,16,16}),
            (HBRUSH)0x61
        ),
        lg->history().at(3)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x31,(HGDIOBJ)0x53),
        lg->history().at(4)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x31,(HGDIOBJ)0x62),
        lg->history().at(5)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->Ellipse),(HDC)0x31,0,0,16,16),
        lg->history().at(6)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x33,
            0,
            0,
            SRCAND
        ),
        lg->history().at(7)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x32,
            0,
            0,
            SRCPAINT
        ),
        lg->history().at(8)
    );
    lg->history().clear();

    radioButton->deactivate(POINT({32,152}));
    CHECK_FALSE(radioButton->value());
    CHECK_EQUAL(9,lg->history().size());
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->FillRect),
            (HDC)0x32,
            RECT({0,0,16,16}),
            (HBRUSH)0x62
        ),
        lg->history().at(0)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x33,
            0,
            0,
            NOTSRCCOPY
        ),
        lg->history().at(1)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x32,
            0,
            0,
            16,
            16,
            (HDC)0x31,
            0,
            0,
            SRCAND
        ),
        lg->history().at(2)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->FillRect),
            (HDC)0x31,
            RECT({0,0,16,16}),
            (HBRUSH)0x61
        ),
        lg->history().at(3)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x31,(HGDIOBJ)0x52),
        lg->history().at(4)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x31,(HGDIOBJ)0x63),
        lg->history().at(5)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->Ellipse),(HDC)0x31,0,0,16,16),
        lg->history().at(6)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x33,
            0,
            0,
            SRCAND
        ),
        lg->history().at(7)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x32,
            0,
            0,
            SRCPAINT
        ),
        lg->history().at(8)
    );
    lg->history().clear();

    lg->mockUp(NAMED_ADDRESS(radioButton->change));
    radioButton->deactivate(POINT({40,160}));
    CHECK(radioButton->value());
    CHECK_EQUAL(10,lg->history().size());
    CHECK_EQUAL
    (call(NAMED_ADDRESS(radioButton->change)),lg->history().at(0));
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->FillRect),
            (HDC)0x32,
            RECT({0,0,16,16}),
            (HBRUSH)0x63
        ),
        lg->history().at(1)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x33,
            0,
            0,
            NOTSRCCOPY
        ),
        lg->history().at(2)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x32,
            0,
            0,
            16,
            16,
            (HDC)0x31,
            0,
            0,
            SRCAND
        ),
        lg->history().at(3)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->FillRect),
            (HDC)0x31,
            RECT({0,0,16,16}),
            (HBRUSH)0x61
        ),
        lg->history().at(4)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x31,(HGDIOBJ)0x53),
        lg->history().at(5)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x31,(HGDIOBJ)0x62),
        lg->history().at(6)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->Ellipse),(HDC)0x31,0,0,16,16),
        lg->history().at(7)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x33,
            0,
            0,
            SRCAND
        ),
        lg->history().at(8)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x32,
            0,
            0,
            SRCPAINT
        ),
        lg->history().at(9)
    );
    lg->history().clear();

    radioButton->value(false);
    CHECK_FALSE(radioButton->value());
    CHECK_EQUAL(10,lg->history().size());
    CHECK_EQUAL
    (call(NAMED_ADDRESS(radioButton->change)),lg->history().at(0));
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->FillRect),
            (HDC)0x32,
            RECT({0,0,16,16}),
            (HBRUSH)0x62
        ),
        lg->history().at(1)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x33,
            0,
            0,
            NOTSRCCOPY
        ),
        lg->history().at(2)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x32,
            0,
            0,
            16,
            16,
            (HDC)0x31,
            0,
            0,
            SRCAND
        ),
        lg->history().at(3)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->FillRect),
            (HDC)0x31,
            RECT({0,0,16,16}),
            (HBRUSH)0x61
        ),
        lg->history().at(4)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x31,(HGDIOBJ)0x52),
        lg->history().at(5)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->SelectObject),(HDC)0x31,(HGDIOBJ)0x63),
        lg->history().at(6)
    );
    CHECK_EQUAL
    (
        call(NAMED_ADDRESS(pt->Ellipse),(HDC)0x31,0,0,16,16),
        lg->history().at(7)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x33,
            0,
            0,
            SRCAND
        ),
        lg->history().at(8)
    );
    CHECK_EQUAL
    (
        call
        (
            NAMED_ADDRESS(pt->BitBlt),
            (HDC)0x31,
            0,
            0,
            16,
            16,
            (HDC)0x32,
            0,
            0,
            SRCPAINT
        ),
        lg->history().at(9)
    );
}

}
